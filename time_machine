#!/usr/bin/env bash

# Aim: use rsync to mimick Apple's Time Machine
# Copyright (C) 2017,2019 Timothée Flutre
# License: GPL-3+
# Person: Timothée Flutre [cre,aut]
# Versioning: https://github.com/timflutre/perso
# Inspiration: https://blog.interlinked.org/tutorials/rsync_time_machine.html

progVersion="0.2.1" # http://semver.org/

# Display the help on stdout.
# The format complies with help2man (http://www.gnu.org/s/help2man)
function help () {
  msg="\`${0##*/}' uses rsync to mimick Apple's Time Machine.\n"
  msg+="\n"
  msg+="Usage: ${0##*/} [OPTIONS] ...\n"
  msg+="\n"
  msg+="Options:\n"
  msg+="  -h, --help\tdisplay the help and exit\n"
  msg+="  -V, --version\toutput version information and exit\n"
  msg+="  -v, --verbose\tverbosity level (0/default=1/2/3)\n"
  msg+="  -s, --source\tpath to the source directory\n"
  msg+="\t\tdefault='${sourceDir}'\n"
  msg+="  -t, --target\tpath to the target directory\n"
  msg+="\t\tdefault='${targetDir}'\n"
  msg+="  -p, --prev\tname of the previous backup\n"
  msg+="\t\tdefault='${previousBackup}'\n"
  msg+="  -c, --current\tname of the current backup\n"
  msg+="\t\tdefault='${currentBackup}'\n"
  msg+="  -e, --exclude\tpath to the exclude file\n"
  msg+="\t\tdefault='${excludeFile}'\n"
  msg+="\t\tskipped if doesn't exist\n"
  msg+="\n"
  msg+="Examples:\n"
  msg+="  ${0##*/}\n"
  msg+="  ${0##*/} -s ${sourceDir} -t ${targetDir}\n"
  msg+="  ${0##*/} -s /projects / -t /media/backup\n"
  msg+="\n"
  msg+="Report bugs to <timflutre@gmail.com>."
  echo -e "$msg"
}

# Display version and license information on stdout.
# The person roles comply with R's guidelines (The R Journal Vol. 4/1, June 2012).
function version () {
  msg="${0##*/} ${progVersion}\n"
  msg+="\n"
  msg+="Copyright (C) 2017,2019 Timothée Flutre.\n"
  msg+="License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n"
  msg+="\n"
  msg+="Written by Timothée Flutre [cre,aut]."
  msg+="\n"
  msg+="Inspired by Michael Jakl."
  echo -e "$msg"
}

# http://www.linuxjournal.com/content/use-date-command-measure-elapsed-time
function timer () {
  if [[ $# -eq 0 ]]; then
    echo $(date '+%s')
  else
    local startRawTime=$1
    endRawTime=$(date '+%s')
    if [[ -z "$startRawTime" ]]; then startRawTime=$endRawTime; fi
    elapsed=$((endRawTime - startRawTime)) # in sec
    nbDays=$((elapsed / 86400))
    nbHours=$(((elapsed / 3600) % 24))
    nbMins=$(((elapsed / 60) % 60))
    nbSecs=$((elapsed % 60))
    printf "%01dd %01dh %01dm %01ds" $nbDays $nbHours $nbMins $nbSecs
  fi
}

# Parse the command-line arguments.
# http://stackoverflow.com/a/4300224/597069
function parseCmdLine () {
  getopt -T > /dev/null # portability check (say, Linux or Mac OS?)
  if [ $? -eq 4 ]; then # GNU enhanced getopt is available
	  TEMP=`getopt -o hVv:s:t:p:c:e: -l help,version,verbose:,source:target:previous:current:exclude: \
        -n "$0" -- "$@"`
  else # original getopt is available (no long options, whitespace, sorting)
	  TEMP=`getopt hVv:s:t:p:c:e: "$@"`
  fi
  if [ $? -ne 0 ]; then
	  echo "ERROR: "$(which getopt)" failed" 1>&2
	  getopt -T > /dev/null
	  if [ $? -ne 4 ]; then
	    echo "did you use long options? they are not handled \
on your system, use -h for help"
	  fi
	  exit 2
  fi
  eval set -- "$TEMP"
  while [ $# -gt 0 ]; do
    case "$1" in
      -h | --help) help; exit 0; shift;;
      -V | --version) version; exit 0; shift;;
      -v | --verbose) verbose=$2; shift 2;;
      -s | --source) sourceDir=$2; shift 2;;
      -t | --target) targetDir=$2; shift 2;;
      -p | --previous) previousBackup=$2; shift 2;;
      -c | --current) currentBackup=$2; shift 2;;
      -e | --exclude) excludeFile=$2; shift 2;;
      --) shift; break;;
      *) echo "ERROR: options parsing failed, use -h for help" 1>&2; exit 1;;
    esac
  done
  if [ -z "${sourceDir}" ]; then
    echo -e "ERROR: missing compulsory option --s, --source\n" 1>&2
    help
    exit 1
  fi
  if [ ! -d "${sourceDir}" ]; then
    echo -e "ERROR: can't find source directory ${sourceDir}\n" 1>&2
    help
    exit 1
  fi
  if [ ! -d "${targetDir}" ]; then
    echo -e "ERROR: can't find target directory ${targetDir}\n" 1>&2
    help
    exit 1
  fi
  if [ ! -d "${targetDir}/${previousBackup}" ]; then
    echo -e "ERROR: can't find previous backup ${targetDir}/${previousBackup}\n" 1>&2
    help
    exit 1
  fi
  if [ -d "${targetDir}/${currentBackup}" ]; then
    echo -e "ERROR: current backup already exists ${targetDir}/${currentBackup}\n" 1>&2
    help
    exit 1
  fi
  if [ ! -z "${excludeFile}" ]; then
    if [ ! -f "${excludeFile}" ]; then
      echo -e "WARNING: can't find exclude file ${excludeFile}\n" 1>&2
      excludeFile=""
    fi
  fi
}

function run () {
  if [ $verbose -gt "0" ]; then
    echo "INFO: check available space..."
    perc=$(df -H | grep ${targetDir} | awk '{sub("%","",$5); print $5}')
    if [ $perc -gt "90" ]; then
      msg="ERROR: running out of space"
      msg+=" ("$perc"%)"
      echo -e $msg
      exit 1
    else
      msg="INFO: enough space"
      msg+=" ("$perc"%)"
      echo -e $msg
    fi
  fi
  
  RSYNC_ARGS="-axzhP"
  RSYNC_ARGS+="C --include '.git'"
  RSYNC_ARGS+=" --stats"
  RSYNC_ARGS+=" --delete"
  RSYNC_ARGS+=" --delete-excluded"
  if [ -f "${excludeFile}" ]; then
    echo -e "INFO: use exclude file ${excludeFile}";
    RSYNC_ARGS+=" --exclude-from=${excludeFile}"
  fi
  RSYNC_ARGS+=" --link-dest=${targetDir}/${previousBackup}"
  # RSYNC_ARGS+=" --list-only" # to debug
  
  RSYNC_CMD="rsync"
  RSYNC_CMD+=" ${RSYNC_ARGS}"
  RSYNC_CMD+=" ${sourceDir}/"
  RSYNC_CMD+=" ${targetDir}/${currentBackup}"
  echo ${RSYNC_CMD}
  eval ${RSYNC_CMD}
  
  rm -rf ${targetDir}/${previousBackup}
  ln -s ${targetDir}/${currentBackup} ${targetDir}/${previousBackup}
}

verbose=1
sourceDir="${HOME}"
targetDir="/media/${USER}/${USER}-backup"
previousBackup="backup_${HOSTNAME}_latest"
currentBackup="backup_${HOSTNAME}_$(date "+%F_%H-%M-%S")"
excludeFile="${sourceDir}/.rsync/exclude.txt"
parseCmdLine "$@"

if [ $verbose -gt "0" ]; then
  startTime=$(timer)
  msg="INFO: start ${0##*/} ${progVersion} $(date +"%Y-%m-%d")"
  msg+=" $(date +"%H:%M:%S")"
  msg+="\nINFO: cmd-line: $0 "$@ # comment if an option takes a glob as argument
  msg+="\nINFO: cwd: $(pwd)"
  echo -e $msg
fi

run

if [ $verbose -gt "0" ]; then
  msg="INFO: end ${0##*/} ${progVersion} $(date +"%Y-%m-%d")"
  msg+=" $(date +"%H:%M:%S")"
  msg+=" ($(timer startTime))"
  echo $msg
fi

# Local Variables:
# mode: Shell-script
# coding: utf-8-unix
# tab-width: 2
# sh-basic-offset: 2
# sh-indentation: 2
# End:
